(ns reversi)

(def black "\u25CF")
(def white "\u25CB")
(def emp " ")
;; convenient settings for debugging:
;;(def black "b")
;;(def white "w")

(defn new-game [boardsize]
  (let [g (vec (for [i (range boardsize)] (vec (for [j (range boardsize)] emp))))
        m (dec (/ boardsize 2))
        b [[[0 0] black] [[1 1] black] [[0 1] white] [[1 0] white]]]
    (reduce (fn [board [[r c] v]] (assoc-in board [(+ r m) (+ c m)] v)) g b)))

(defn find-pieces-for-player [d p]
  (let [boardsize (count d)
        a (for [r (range boardsize)]
            (for [c (range boardsize) :when (= (get-in d [r c]) p)] [r c]))]
    (->> a flatten (partition 2))))
(defn find-adj [d [r c]]
  (let [boardsize (count d)
        a (for [rr (range (dec r) (+ 2 r))]
            (for [cc (range (dec c) (+ 2 c))
                  :when (not (or (< rr 0)
                                 (< cc 0)
                                 (> rr (dec boardsize))
                                 (> cc (dec boardsize))
                                 (and (= cc c) (= rr r))))] [rr cc]))]
    (->> a flatten (partition 2))))
(defn find-all-moves [d p]
  (let [m (set (find-pieces-for-player d (if (= p white) black white)))
        empty (find-pieces-for-player d emp)
        lm (for [e empty] (for [l (find-adj d e) :when (contains? m l)] [e l]))]
    (->> lm flatten (partition 2) (partition 2) set)))

(defn find-line [d [sr1 sc1] [ir ic] p]
  (let [mp (if (= p white) black white)]
    (loop [[sr sc] [(+ sr1 ir) (+ sc1 ic)] a []]
      (let [n (get-in d [sr sc])]
        (cond
         (= n mp) (recur [(+ sr ir) (+ sc ic)] (cons [sr sc] a))
         (= n p) [[sr1 sc1] (vec a)]
         :else [])))))

(def find-legal-moves
  (fn [d p]
    (let [am (for [m (find-all-moves d p)
                        :let [[[er ec] [lr lc]] m
                              ir (- lr er)
                              ic (- lc ec)
                              a (find-line d [er ec] [ir ic] p)]
                        :when (not (empty? a))] [a [ir ic]] )
          amm (group-by ffirst am)
          answer (into {}
                       (for [[k v] amm]
                         [k {:runs
                             (map (fn [[a i]]
                                    (let [run (second a)]
                                      {:run run
                                       :inc i
                                       :pre (get-in d (vec (map - k i)))
                                       :post (get-in d (vec (map + (map + (last run) i) i)))})) v)}]))]
      (do
        ;;(println (if (= p black) "black moves" "white moves"))
        ;;(println answer)
        answer))))

(defn get-flips [m]
  (set (apply concat (map :run (:runs m)))))

(defn printboard [d]
  (doseq [r d] (println r)))

(defn update-board [d m p]
  ;; (printboard d)
  ;; (println m)
  (reduce (fn [dd e] (assoc-in dd e p)) d m))

(defn other [player]
  (if (= player black) white black))

(declare find-best-move)

(defn score
  "count the number of opponent pieces flipped add 1 for each edge piece is on"
  [d [[r c] v1] opponent lookahead]
  (let [s (dec (count d))
        v (get-flips v1)
        score (+ (count v) ; a point for each opponent flipped
                 (if (or (= r 0) (= r s))  1 0) ; a point for each edge occupied
                 (if (or (= c 0) (= c s))  1 0)
                 ;; here we'll either lookahead or if at lookahead terminus, do the ends-rule
                 (- (if (> lookahead 0)
                      (let [dd (update-board d (cons [r c] v) (other opponent))
                            m (find-legal-moves dd opponent)]
                        (if (not (empty? dd))
                          (let [[m flips] (find-best-move dd m (other opponent) (dec lookahead))]
                            (+ 1 (count flips)))
                          0))
                      (- (let [a (-> v1 :runs (nth 0) :pre)  ; subtract points for giving an open run.
                               b (-> v1 :runs (nth 0) :post)]
                           (do
                             ;;(println a b opponent)
                             (if (or (and (= a opponent) (= b emp))
                                     (and (= b opponent) (= a emp)))
                               (count v)
                               0)))))))]
    (do
      ;;(if (= 0 lookahead) (println "[r c] = " [r c] " v1 = " v1 " score = " score))
      [score
       [[r c] v]])))

(defn find-best-move [d m opponent lookahead]
  ;;(println "find-best-move")
  (let [s (->> (map #(score d % opponent lookahead) m)
               (sort #(compare (first %2) (first %1))))]
    (if (not (empty? s))
      (let [ss (take-while #(= (first %) (ffirst s)) s)]
        (second (nth ss (rand-int (count ss))))))))

(defn compute-score [c game]
  (count (filter #(= % c) (flatten game))))

(defn game-over [g]
  ;;(str "white: " (compute-score white g) " black: " (compute-score black g))
  (if (> (compute-score white g) (compute-score black g)) "white" "black"))

(defn play-game [p1 p1la p2 p2la g in-moves-exist]
  ;;(printboard g)
  (let [lm (find-legal-moves g p1)
        moves-exist (not (empty? lm))]
    (if moves-exist
      (let [[fm bm] (find-best-move g lm p2 p1la)]
        (do
          ;;(println p1 " chose " fm)
          (recur p2 p2la p1 p1la (update-board g (cons fm bm) p1) true)))
      (if in-moves-exist
        (recur p2 p2la p1 p1la g false)
        (game-over g)))))

(defn play-two []
  (play-game black 0 white 2 (new-game 8) true))
