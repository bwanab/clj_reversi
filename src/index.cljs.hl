(page "index.html"
      (:require [reversi :as r]))

;; (defc new-game [[{:text ""} {:text ""} {:text ""} {:text ""} ]
;;                 [{:text ""} {:text "b"} {:text "w"} {:text ""}]
;;                 [{:text ""} {:text "w"} {:text "b"} {:text ""}]
;;                 [{:text ""} {:text ""} {:text ""} {:text ""}]])

;; (def new-game [[r/emp r/emp r/emp r/emp r/emp r/emp]
;;                [r/emp r/emp r/emp r/emp r/emp r/emp]
;;                [r/emp r/emp r/black r/white r/emp r/emp]
;;                [r/emp r/emp r/white r/black r/emp r/emp]
;;                [r/emp r/emp r/emp r/emp r/emp r/emp]
;;                [r/emp r/emp r/emp r/emp r/emp r/emp]
;;                ])

(def boardsize 8)
(def new-game (let [g (vec (for [i (range boardsize)] (vec (for [j (range boardsize)] r/emp))))
                   m (dec (/ boardsize 2))
                   b [[[0 0] r/black] [[1 1] r/black] [[0 1] r/white] [[1 0] r/white]]]
               (reduce (fn [board [[r c] v]] (assoc-in board [(+ r m) (+ c m)] v)) g b)))

(println newgame)

(defn copy-game [] (vec (for [row new-game] (vec (for [c row] c)))))
(defc game (copy-game))
(defc whitescore 2)
(defc blackscore 2)

(def indexed (partial map-indexed vector))

(defn reset-game! []
  (reset! game (copy-game)))

(defn play! [[i j] c]
  (let [lm (r/find-legal-moves @game c)
        s [i j]
        p (if (= c r/black) r/white r/black)]
    (do
      (if (not (empty? lm))
        (swap! game r/update-board (cons s (get lm s)) c))
      (let [m (r/find-legal-moves @game p)]
        (if (not (empty? m))
          (let [fm (first (r/find-best-move @game m))]
            (do (swap! game r/update-board (cons fm (get m fm)) p)))))
      (reset! whitescore (count (filter #(= % r/white) (flatten @game))))
      (reset! blackscore (count (filter #(= % r/black) (flatten @game)))))))

(html
 (head
  (link :href "css/bootstrap.css" :rel "stylesheet")
  (link :href "css/screen.css" :rel "stylesheet"))
  (body
   (table :class "reversi"
          (loop-tpl :bindings [[i row] (cell= (indexed game))]
                    ( tr (loop-tpl :bindings [[j x] (cell= (indexed row))]
                                   (td :on-click #(play! [@i @j] r/black) (text "~{x}"))))))
   (button :on-click reset-game! "new game")
   (table :class "reversi" (tr (td "white") (td (text "~{whitescore}")) (td "black") (td (text "~{blackscore}"))))
   ))
