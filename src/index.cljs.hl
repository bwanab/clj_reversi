(page "index.html"
      (:require [reversi :as r]))

;; (defc new-game [[{:text ""} {:text ""} {:text ""} {:text ""} ]
;;                 [{:text ""} {:text "b"} {:text "w"} {:text ""}]
;;                 [{:text ""} {:text "w"} {:text "b"} {:text ""}]
;;                 [{:text ""} {:text ""} {:text ""} {:text ""}]])

(def new-game [[r/emp r/emp r/emp r/emp]
               [r/emp r/black r/white r/emp]
               [r/emp r/white r/black r/emp]
               [r/emp r/emp r/emp r/emp]])

(defn copy-game [] (vec (for [row new-game] (vec (for [c row] c)))))
(defc game (copy-game))

(def indexed (partial map-indexed vector))

(defn reset-game! []
  (reset! game (copy-game)))

(defn play! [[i j] c]
  (let [lm (r/find-legal-moves @game c)
        s [i j]
        p (if (= c r/black) r/white 'b)]
    (do
      (swap! game r/update-board (cons s (get lm s)) c)
      (let [m (r/find-legal-moves @game p)]
        (if (not (empty? m))
          (let [fm (first (r/find-best-move @game m))]
            (swap! game r/update-board (cons fm (get m fm)) p)))))))

(html
 (head
  (link :href "css/bootstrap.css" :rel "stylesheet")
  (link :href "css/screen.css" :rel "stylesheet"))
  (body
   (table :class "reversi"
          (loop-tpl :bindings [[i row] (cell= (indexed game))]
                    ( tr (loop-tpl :bindings [[j x] (cell= (indexed row))]
                                   (td :on-click #(play! [@i @j] 'b) (text "~{x}"))))))
   (button :on-click reset-game! "new game")))
